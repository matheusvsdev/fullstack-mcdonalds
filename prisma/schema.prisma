// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo que representa restaurantes no sistema
model Restaurant {
  id             String @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String

  // Lista de categorias de menu associadas ao restaurante
  // OneToMany: Um restaurante pode ter várias categorias de menu
  menuCategories MenuCategory[]

  // Lista de produtos disponíveis no restaurante
  // OneToMany: Um restaurante pode ter vários produtos no cardápio
  products Product[]

  // Lista de pedidos feitos no restaurante
  // OneToMany: Um restaurante pode receber vários pedidos
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo que representa categorias de menu associadas a um restaurante
model MenuCategory {
  id   String @id @default(uuid())
  name String

  // Relação com o restaurante
  // ManyToOne
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  // Lista de produtos dentro desta categoria
  // OneToMany: Uma categoria pode ter vários produtos
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo que representa um produto no cardápio
model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String
  ingredients String[]

  // Relacionamento com pedidos
  // OneToMany: Um produto pode estar em vários pedidos
  orderProduct OrderProduct[]

  // Relação com o restaurante
  // ManyToOne: Um produto pertence a um único restaurante
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  // Relação com a categoria de menu
  // ManyToOne: Um produto pertence a uma única categoria de menu
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo que representa um pedido
model Order {
  // ID numérico para facilitar leitura ao invés de UUID
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod

  // Relação com o restaurante
  // ManyToOne: Um pedido pertence a um único restaurante
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  // Lista de produtos dentro do pedido
  // OneToMany: Um pedido pode ter vários produtos
  orderProducts OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo que representa os produtos dentro de um pedido
model OrderProduct {
  id String @id @default(uuid())

  // Relação com o produto
  // ManyToOne: Um item do pedido pertence a um único produto
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Relação com o pedido
  // ManyToOne: Um item do pedido pertence a um único pedido
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  // Quantidade do produto dentro do pedido
  quantity Int

  // Preço do produto no momento do pedido
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Status possíveis de um pedido
enum OrderStatus {
  PENDING // Pedido foi criado, mas ainda não começou a ser preparado
  IN_PREPARATION // Pedido está sendo preparado
  FINISHED // Pedido finalizado e pronto para entrega/retirada
}

// Método de consumo do pedido
enum ConsumptionMethod {
  TAKEAWAY // Pedido para retirada
  DINE_IN // Pedido para consumo no local
}
